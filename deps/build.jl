using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libsymspg"], :libsymspg),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/unkcpz/SpglibBuilder/releases/download/v0.1.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v0.1.2.i686-linux-gnu.tar.gz", "e2a5b2422c85d8a1fa89be86247a57847b2d52632bde5952a6e00bfc178fd8bf"),
    Windows(:i686) => ("$bin_prefix/SpglibBuilder.v0.1.2.i686-w64-mingw32.tar.gz", "b6b031bb3844952b1ad4b56e9d59737a98ba58de941dfd701f4e8b1fae565077"),
    MacOS(:x86_64) => ("$bin_prefix/SpglibBuilder.v0.1.2.x86_64-apple-darwin14.tar.gz", "14d7d7de284c892e9dfb6bb0542cf70bfdb1219ee6005623cfc671788cf3cc43"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/SpglibBuilder.v0.1.2.x86_64-linux-gnu.tar.gz", "d6678ca20f75edc4ea8e928c6ff86c9790f67db619360fb598c194247ed8ff86"),
    FreeBSD(:x86_64) => ("$bin_prefix/SpglibBuilder.v0.1.2.x86_64-unknown-freebsd11.1.tar.gz", "23868b72560200b6c1a20f2276fef66c79cd5d0187a6b04c6a710badca5ed491"),
    Windows(:x86_64) => ("$bin_prefix/SpglibBuilder.v0.1.2.x86_64-w64-mingw32.tar.gz", "3ce4e6e6bbcec6c520b06c14a960526316edec825bb0457ac02f6e10d2882da5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
